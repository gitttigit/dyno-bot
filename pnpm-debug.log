---
  0 debug pnpm:scope: 
    selected: 1
    workspacePrefix: null
  1 info pnpm: 
    message: "A store server is running. All store manipulations are delegated to it."
    prefix: "/app"
  2 debug pnpm:package-json: 
    initial: 
      //1: "describes your app and its dependencies"
      //2: "https://docs.npmjs.com/files/package.json"
      //3: "updating this file will download and update your packages"
      version: "0.0.1"
      description: "Only Code tarafından yapılmış bir hazır altyapı."
      main: "main.js"
      scripts: 
        start: "node main.js"
      dependencies: 
        mkdirp: "^0.5.1"
        node-source-rcon: "^0.1.2"
        request: "^2.88.0"
        base64-img: "^1.0.4"
        wolfram-alpha-api: "^0.2.1"
      engines: 
        node: "8.x"
      repository: 
        url: "https://glitch.com/edit/#!/altyapi-bos-pompala-cos"
      license: "MIT"
      keywords: 
        - "node"
        - "glitch"
        - "express"
      readme: "# ALINTIDIR\n# dynoBot\n\n### What is dynoBot?\ndynoBot is a modular Discord bot using JavaScript and Python.\n\n### What commands does the bot have?\nYou can see all available commands by typing \"@BotName help\" in the discord chat.\nAlternatively you can take a look at the [commands.json](https://github.com/Blackhawk-TA/dynoBot/blob/master/cfg/commands.json) file.\n\n### How can I use the bot for my own discord server?\nIt's quite simple, first of all you need nodejs and optinally python3 if you want to use python modules.\nAfter the installation, clone this repository and run `npm install` within the `dynoBot` folder. It should install all required dependencies. \n\nOnce that's done, you'll have to add the `security.json` file within the directory `dynoBot/cfg`.\nIt should look like this: \n```json\n{\n\t\"token\": \"your discord bot token\"\n}\n```\nIf you want to use the Wolfram|Alpha module, you'll need their API key in the security.json as well.\nYou can request a free Wolfram|Alpha API key [here](https://products.wolframalpha.com/api/).\n\nWith the API key, your security.json should look like this:\n```json\n{\n\t\"token\": \"your discord bot token\",\n\t\"wolframAlphaAPI\": \"your api key\"\n}\n```\n\nNow you can start the bot by using the command `node main.js` within the directory `dynoBot`.\n\n### How can I create new modules?\nYou can create modules in JavaScript or Python. There are two types of modules, a chat module and a hook module.\nA chat module is executed every time a user sends a message with the corresponding command.\nA hook is automatically executed in a specific interval. Below I will show you how to create them in JavaScript and Python.\nAlternatively you can take a look at the example modules for JavaScript and Python included in the project.\n\n#### Chat module:\nJavaScript and Python modules both need an entry in the commands.json file looking like this:\n```json\n{\n    \"type\": \"python\",\n    \"regex\": \"py-example|python example\",\n    \"path\": \"src/py-modules/example-python.py\"\n}\n```\n##### JavaScript\nThe JavaScript module has direct access to the [discord.js wrapper](https://discord.js.org).\nThe base structure of a module looks like this:\n```js\nmodule.exports = {\n\trun: function(msg, client) {\n\t\tmsg.channel.send(\"I received these parameters: \" + msg.contentArray);\n\t}\n};\n```\nThe code executed when the module is called belongs into the run function.\nThe parameter msg is the message object from the discord wrapper ([see documentation](https://discord.js.org)).\nIt has two additions to it: `msg.contentArray` which has a chat message split up as an array,\n                            `msg.aRegexGroups` which has the regex groups from the chat message as an array\n\n##### Python\nThe Python module has no access to the [discord.js wrapper](https://discord.js.org) but gets the `msg.contentArray` and `msg.aRegexGroups`.\nThe base structure looks like this:\n```python\nimport sys\n\nmsg = sys.argv[1].split(\",\")  # Array of input parameters\nregexGroups = sys.argv[2].split(\",\")  # Array of input regex groups\n\n# insert code to handle the input parameters here\n\nprint(\"I received these parameters: \" + str(msg))  # This will be the msg that the bot sends\nprint(\"These are the regex groups\" + str(regexGroups))  # This is a second message that the bot sends\nsys.stdout.flush()  # cleanup\n```\nAs you can see, the print makes the bot send a message.\n\n#### Hook module:\nJavaScript and Python modules both need an entry in the hooks.json file looking like this:\n```json\n\"technicalHookName\": {\n    \"type\": \"js\",\n    \"name\": \"hookName\",\n    \"path\": \"src/js-modules/yourModule.js\",\n    \"channel\": 0,\n    \"interval\": 10000,\n    \"running\": false\n}\n```\n\n##### JavaScript\nThe JavaScript module has access to the channel object of the [discord.js wrapper](https://discord.js.org).\nThe code executed when the module is called belongs into the hook function.\n\n```js\nmodule.exports = {\n\thook: function(channel) {\n\t\tchannel.send(\"This js message is automatically sent in a specific interval\");\n\t}\n};\n```\n\nThe hook function is executed when the hooks.json has the an existing channel and is running.\n\n##### Python\nThe Python module has no access to the channel object, it receives no inputs.\nIt just runs the python script and every call of print creates a bot message. It should look like this:\n\n```python\nimport sys\n\n# insert code to handle the input parameters here\n\n# This will be the msg that the bot sends\nprint(\"This py message is automatically sent in a specific interval\")\nsys.stdout.flush()  # cleanup\n```\n\n### Can I create pull request with new modules?\nYes, I will review your code and if it's good, I'll merge it into the master.\nPlease adapt your code style regarding already existing modules.\n\n### Can I develop the bot without sharing my modules?\nYes, that's also ok. But it would be nice if more people could profit from your work.\n"
      readmeFilename: "README.md"
      gitHead: "b7e751a80623cf1f37970f72b52cf12b2be7f09f"
      name: ""
      _id: "@0.0.1"
    prefix: "/app"
  3 debug pnpm:stage: 
    prefix: "/app"
    stage: "resolution_started"
  4 debug pnpm:progress: 
    packageId: "registry.npmjs.org/mkdirp/0.5.1"
    requester: "/app"
    status: "resolved"
  5 debug pnpm:progress: 
    packageId: "registry.npmjs.org/wolfram-alpha-api/0.2.1"
    requester: "/app"
    status: "resolved"
  6 debug pnpm:progress: 
    packageId: "registry.npmjs.org/base64-img/1.0.4"
    requester: "/app"
    status: "resolved"
  7 debug pnpm:progress: 
    packageId: "registry.npmjs.org/request/2.88.0"
    requester: "/app"
    status: "resolved"
  8 error pnpm: "Cannot read property 'latest' of undefined"
